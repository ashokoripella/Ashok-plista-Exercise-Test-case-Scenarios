"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dashboard_1 = require("./types/dashboard");
const texts_1 = require("./texts");
class Uploader {
    constructor(runId, readFile, transport, logger) {
        this._runId = runId;
        this._transport = transport;
        this._uploads = [];
        this._logger = logger;
        this._readFile = readFile;
    }
    async _getUploadInfo(uploadEntityId) {
        const response = await this._transport.fetchFromDashboard(`api/uploader/getUploadUrl?dir=${this._runId}`);
        if (response.ok)
            return await response.json();
        this._logger.error(texts_1.createGetUploadInfoError(uploadEntityId, response.toString()));
        return null;
    }
    async _upload(uploadInfo, uploadEntity, uploadError) {
        const { uploadUrl, uploadId } = uploadInfo;
        const response = await this._transport.fetch(uploadUrl, {
            method: 'PUT',
            headers: {
                'Content-Length': uploadEntity.length
            },
            body: uploadEntity
        });
        await this._transport.sendResolveCommand({
            aggregateId: uploadId,
            aggregateName: dashboard_1.AggregateNames.Upload,
            type: dashboard_1.AggregateCommandType.createUpload,
            payload: { reportId: this._runId, status: response.ok ? dashboard_1.UploadStatus.Completed : dashboard_1.UploadStatus.Failed }
        });
        if (!response.ok)
            this._logger.error(`${uploadError}. Response: ${response}`);
    }
    async uploadFile(filePath) {
        const uploadInfo = await this._getUploadInfo(filePath);
        if (!uploadInfo)
            return null;
        const file = await this._readFile(filePath);
        this._uploads.push(this._upload(uploadInfo, file, texts_1.createFileUploadError(uploadInfo.uploadId, filePath)));
        return uploadInfo.uploadId;
    }
    async uploadTest(testName, testRunInfo) {
        const uploadInfo = await this._getUploadInfo(testName);
        if (!uploadInfo)
            return null;
        const buffer = Buffer.from(JSON.stringify(testRunInfo, (key, value) => value instanceof RegExp ? value.toString() : value));
        this._uploads.push(this._upload(uploadInfo, buffer, texts_1.createTestUploadError(uploadInfo.uploadId, testName)));
        return uploadInfo.uploadId;
    }
    async waitUploads() {
        await Promise.all(this._uploads);
    }
}
exports.Uploader = Uploader;
